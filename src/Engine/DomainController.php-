<?php
declare (strict_types=1);

namespace AeonDigital\EnGarde;

use AeonDigital\EnGarde\Interfaces\Engine\iController as iController;
use AeonDigital\Interfaces\Http\Message\iResponse as iResponse;
use AeonDigital\EnGarde\Interfaces\Config\iRoute as iRouteConfig;
use AeonDigital\EnGarde\Interfaces\Config\iApplication as iApplicationConfig;
use AeonDigital\EnGarde\Interfaces\Config\iDomain as iDomainConfig;
use AeonDigital\EnGarde\Interfaces\Config\iServer as iServerConfig;
use AeonDigital\Interfaces\Http\Message\iServerRequest as iServerRequest;


/**
 * Classe abstrata que deve ser herdada pelos controllers das aplicações.
 *
 * @codeCoverageIgnore
 *
 * @package     AeonDigital\EnGarde
 * @author      Rianna Cantarelli <rianna@aeondigital.com.br>
 * @copyright   2020, Rianna Cantarelli
 * @license     ADPL-v1.0
 */
abstract class DomainController implements iController
{





    /**
     * Instância de configuração do Servidor.
     *
     * @var         iServerConfig
     */
    protected iServerConfig $serverConfig;
    /**
     * Instância das configurações do Domínio.
     *
     * @var         iDomainConfig
     */
    protected iDomainConfig $domainConfig;
    /**
     * Configuraçõs para a Aplicação corrente.
     *
     * @var         iApplicationConfig
     */
    protected iApplicationConfig $applicationConfig;
    /**
     * Objeto de configuração da Requisição atual.
     *
     * @var         iServerRequest
     */
    protected iServerRequest $serverRequest;
    /**
     * Objeto que representa a configuração bruta da rota alvo.
     *
     * @var         array
     */
    protected array $rawRouteConfig = [];
    /**
     * Objeto que representa a configuração da rota alvo.
     *
     * @var         iRouteConfig
     */
    protected iRouteConfig $routeConfig;
    /**
     * Objeto ``iResponse``.
     *
     * @var         iResponse
     */
    protected iResponse $response;
    /**
     * Objeto ``stdClass``.
     * Deve ser preenchido durante a execução da ``Action`` e poderá ser acessado nas views.
     * Tem como finalidade agregar todas as informações que o ``UA`` está requisitando.
     *
     * @var         \stdClass
     */
    protected \stdClass $viewData;
    /**
     * Objeto ``stdClass``.
     * Deve ser preenchido durante a execução da ``Action`` e poderá ser acessado nas views.
     *
     * Tem como finalidade agregar informações que sirvam para a criação da view e não devem ser
     * expostas ao ``UA``.
     *
     * @var         \stdClass
     */
    protected \stdClass $viewConfig;










    /**
     * Inicia uma nova instância.
     *
     * @param       iServerConfig $serverConfig
     *              Instância ``iServerConfig``.
     *
     * @param       iDomainConfig $domainConfig
     *              Instância ``iDomainConfig``.
     *
     * @param       iApplicationConfig $applicationConfig
     *              Instância ``iApplicationConfig``.
     *
     * @param       iServerRequest $serverRequest
     *              Instância ``iServerRequest``.
     *
     * @param       array $rawRouteConfig
     *              Instância ``iServerConfig``.
     *
     * @param       iRouteConfig $routeConfig
     *              Instância ``iRouteConfig``.
     *
     * @param       iResponse $response
     *              Instância ``iResponse``.
     */
    function __construct(
        iServerConfig $serverConfig,
        iDomainConfig $domainConfig,
        iApplicationConfig $applicationConfig,
        iServerRequest $serverRequest,
        array $rawRouteConfig,
        iRouteConfig $routeConfig,
        iResponse $response
    ) {
        $this->serverConfig         = $serverConfig;
        $this->domainConfig         = $domainConfig;
        $this->applicationConfig    = $applicationConfig;
        $this->serverRequest        = $serverRequest;
        $this->rawRouteConfig       = $rawRouteConfig;
        $this->routeConfig          = $routeConfig;
        $this->response             = $response;

        $this->viewData     = new \stdClass();
        $this->viewConfig   = new \stdClass();
    }





    /**
     * Retorna a instância ``iResponse``.
     * Aplica no objeto ``iResponse`` as propriedades ``viewData`` (obtido do resultado da
     * execução da action);
     * ``viewConfig`` (obtido com a manipulação das propriedades variáveis do objeto
     * **routeConfig**);
     * ``headers`` (padrões + os definidos pela action)
     *
     * @return      iResponse
     */
    public function getResponse() : iResponse
    {
        $useViewConfig = $this->routeConfig->getActionAttributes();
        foreach ($this->viewConfig as $key => $value) {
            if (isset($useViewConfig[$key]) === false) {
                $useViewConfig[$key] = $value;
            }
        }

        return $this->response->withActionProperties(
            $this->viewData,
            (object)$useViewConfig,
            $this->routeConfig->getResponseHeaders()
        );
    }
}
